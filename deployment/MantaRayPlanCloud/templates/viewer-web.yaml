apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.viewer.web.app }}-nginx-config"
  namespace: {{ .Values.namespace }}
data:
  default.conf: |
    server {
        listen  80;
        listen  [::]:80;
        server_name  localhost;

        location / {
            root      /usr/share/nginx/html;
            try_files $uri $uri/ /index.html =404;
        }

        add_header X-Frame-Options "DENY" always;
        add_header Referrer-Policy "no-referrer";
        add_header X-Content-Type-Options "nosniff";
        add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), navigation-override=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()";
        add_header content-security-policy "default-src 'self' https://{{ .Values.viewer.bff.host }}; img-src 'self' data: ; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src 'self' https://{{ .Values.viewer.bff.host }}; upgrade-insecure-requests; frame-ancestors 'self'";
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.admin.web.app }}-appsetting-config"
  namespace: {{ .Values.namespace }}
data:
  default.conf: |
    {
        "Api": {
          "Address": "https://{{ .Values.viewer.bff.host }}/"
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.viewer.web.deployment }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.viewer.web.app }}
    name: {{ .Values.viewer.web.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.viewer.web.app }}
      task: {{ .Values.viewer.web.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.viewer.web.app }}
        task: {{ .Values.viewer.web.name }}
    spec:
      containers:
        - name: {{ .Values.viewer.web.app }}
          image: "{{ .Values.viewer.web.image }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          resources:
            requests:
              ephemeral-storage: "1Gi"
              memory: "500Mi"
            limits:
              ephemeral-storage: "2Gi"
              memory: "1Gi"
          livenessProbe:
            httpGet:
              path: /healthz.txt
              port: 80
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          volumeMounts:
            - name: "{{ .Values.viewer.web.app }}-nginx-config-volume"
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
              readOnly: true
            Y- name: "{{ .Values.admin.web.app }}-appsettings-config-volume"
              mountPath: /usr/share/nginx/html/appsettings.json
              subPath: appsettings.json
              readOnly: true
          ports:
            - containerPort: 80
      volumes:
        - name: "{{ .Values.viewer.web.app }}-nginx-config-volume"
          configMap:
            name: "{{ .Values.viewer.web.app }}-nginx-config"
        - name: "{{ .Values.admin.web.app }}-appsettings-config-volume"
          configMap:
            name: "{{ .Values.admin.web.app }}-appsettings-config"
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.viewer.web.loadBalancer }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Values.viewer.web.app }}
    task: {{ .Values.viewer.web.name }}
  ports:
    - protocol: TCP
      name: http
      port: 80
      targetPort: 80
  type: LoadBalancer